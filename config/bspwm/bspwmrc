#! /bin/bash

export PANEL_HEIGHT=24
export PANEL_WM_NAME="bspwm_panel"
export PANEL_FONT="Iosevka"

# Utility functions
_check() {
    command -v "$1" > /dev/null
}

_bc() {
    bspc config "$@"
}

_br() {
    bspc rule "$@"
}

# BSPWM Desktop configurations
external_monitor=$(xrandr --query | grep 'HDMI2' | cut -d' ' -f2)
if [[ $external_monitor == "disconnected" ]]; then
    bspc monitor eDP1 --reset-desktops 1 2 3 4 5 6
else
    xrandr --output HDMI2 --mode 1920x1080 --right-of eDP1
    bspc monitor eDP1 --reset-desktops 1 2 3
    bspc monitor HDMI2 --reset-desktops 4 5 6
fi

# BSPWM Configurations and rules
_bc border_width            1
_bc window_gap              15
_bc focused_border_color    '#c74072'

_bc top_padding    0
_bc bottom_padding $(("${PANEL_HEIGHT}"+2))

_bc split_ratio          0.5
_bc borderless_monocle   false
_bc gapless_monocle      true

_br --add TelegramDesktop desktop=^3 state=floating rectangle=200x100+490-75
_br --add Matplotlib state=floating
_br --add matplotlib state=floating
_br --add Polybar layer=lower
_br --add Surf state=tiled
_br --add Emacs --one-shot desktop=^5 follow=on state=tiled
_br --add Emacs state=tiled
_br --add Slack desktop=^2 follow=off state=floating rectangle=800x600+100+30

## Autostart applications and configs

# Parse my custom key mappings.  These enable Mod3 ("Hyper") and make
# some necessary adjustments to that end.  We need to evaluate this
# first otherwise it might mess up with SXHKD.
# [ -f "$HOME"/.Xmodmap ] && xmodmap "$HOME"/.Xmodmap

if _check sxhkd; then
    pgrep -x sxhkd > /dev/null || sxhkd &
fi

if _check feh; then
	$HOME/.fehbg
fi

if _check picom; then
    pgrep picom > /dev/null || picom --experimental-backends &
fi

if _check dunst; then
    pgrep -x dunst > /dev/null || dunst &
fi

# if _check feh; then
#    # ~/.fehbg
#   if [ -e $HOME/.config/bin/theme ]; then
#       $HOME/.config/bin/theme reset 
#   fi
# fi

if _check panel; then
    pgrep lemonbar && pkill lemonbar
    $HOME/.config/bin/panel 
fi

if _check emacs; then
    ps -ef | grep "[e]macs --daemon" || emacs --daemon
fi

